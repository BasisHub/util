REM - RECEIVE PROGRAMS AND DATA
REM  FROM OTHER BUSINESS BASICS
REM - <BXRCV>
REM - (C) COPYRIGHT 1985, 1998 BASIS INTL. LTD.  ALL RIGHTS RESERVED.
REM 100 - SETUP
use java.lang.StringBuilder
declare StringBuilder m_errors! 
m_errors! = new StringBuilder() 
INFILE$=argv(1)
WORKDIR$=argv(2)
m_error$=argv(3)
REM open(98)"/Users/atimm/git/agibbj/DBAGIV4/DP1410.src"
LET BEG$="<<BXBEGIN>>",EOF$="<<EOF>>"
REM PRINT 'CS',"RECEIVE PROGRAMS AND DATA SENT FROM OTHER BUSINESS BASICS",'LF'
REM L150: INPUT "INPUT FILE: ",INFILE$
REM IF INFILE$="" THEN STOP
OPEN (7,ERR=L180)INFILE$; GOTO L190
L180: PRINT 'RB',"CAN'T OPEN ",INFILE$; GOTO L150
L190: LET F$=FID(7); IF ASC(F$)<16 AND F$(1,1)<>$03$ THEN PRINT 'RB',"NOT A STRING FILE OR A DEVICE"; CLOSE (7); GOTO L150
IF ASC(F$)>16 THEN GOSUB L8500; LET B9$="COMM" ELSE LET B9$=""
GOSUB L7500; IF B0$="NO" THEN CLOSE (7); GOTO L150
GOSUB L7000; DIM Z9$(LEN(Z$),$7F$); LET SENDER$=AND(Z$,Z9$); IF SENDER$>"" THEN PRINT "PROGRAMS AND DATA COMING FROM ",SENDER$
GOSUB L10000
REM L240: INPUT "OUTPUT PREFIX: ",WORKDIR$
IF WORKDIR$="END" OR WORKDIR$="end" THEN STOP
IF WORKDIR$>"" AND POS(WORKDIR$(LEN(WORKDIR$))="/\")=0 THEN LET WORKDIR$=WORKDIR$+"/"
L270: GOTO L310;rem ERASE WORKDIR$+"BXRCV.ERR",ERR=L280; GOTO L270
L280: STRING WORKDIR$+"BXRCV.ERR",ERR=L290; GOTO L310
L290: PRINT "UNABLE TO CREATE ",WORKDIR$,"BXRCV.ERR"
GOTO L240
L310:
REM OPEN (100,mode="O_CREATE,APPEND")WORKDIR$+"BXRCV.ERR"
PRINT 'LF',"NOW RECEIVING FILES..."
L1000: REM 1000 -- MAIN LOOP
rem PRINT 'LF',
GOSUB L7000; IF Z$=$$ THEN GOTO L1000
IF Z$=EOF$ THEN GOTO L9000
IF EOF$>$80$ THEN LET Z$(9)=TBL(Z$(9),$7F$)
LET F$=Z$(1,8)+WORKDIR$+Z$(9)
LET PGM=F$(1,1)=$04$
LET F1$=""; IF POS(F$(1,1)=$0626466686C607$) AND F$(2,1)=$00$ THEN GOSUB L7000; IF Z$=EOF$ THEN GOTO L9000 ELSE LET F1$=Z$
LET F$=F$(1,POS(" "<>F$,-1)),F$=F$(1,POS($00$<>F$,-1))
REM PRINT F$(9),
L1110: ERASE F$(9),ERR=L1120; GOTO L1110
L1120: REM Handle MULTI->MKEYED conversion
LET MULTI_TO_MKEYED=F$(1,1)=$F6$; IF F$(1,1)<>$02$ AND AND(F$(1,1),$06$)<>$06$ THEN GOTO L1160
LET F$(1,1)=$06$,F$(3,4)=$00000000$; REM "convert direct/sort to single key mkeyed here ...
IF MULTI_TO_MKEYED THEN GOTO L1220
L1160: REM CREATE FILE
LET RECORDS=0
IF PGM THEN F$(1,8)=$03$+FILL(7,$00$)
IF F1$>"" THEN FILE F$,F1$,ERR=L1180; GOTO L1230 ELSE FILE F$,ERR=L1180; GOTO L1230
L1180: LET E$="CANNOT CREATE (ERROR="+STR(ERR)+"): "+HTA(F$); GOSUB L6500
REM - SKIP CURRENT FILE
L1200: GOSUB L7000; IF Z$<>EOF$ THEN GOTO L1200
GOTO L1000
L1220: REM - TRY TO BUILD FILE
L1230: IF !(PGM) THEN GOTO L3000
OPEN (1)F$(9); LOCK (1);m_content! = new StringBuilder()
numFiles=numFiles+1
if mod(numFiles,100)=0 then print @(3,0),numFiles
rem open destination pgm file 
rem add TB class reference 
REM print(1)"0001 use ::tbred/TB.bbj::TB"
m_content!.append("0001 use ::tbred/TB.bbj::TB")
m_content!.append($0D0A$)
L2060: REM - LOOP FOR EACH LINE
LET RECORDS=RECORDS+1; rem IF MOD(RECORDS,1000)=0 THEN PRINT ".",
GOSUB L7000; IF Z$=EOF$ THEN GOTO L2200
GOSUB L15000


LET Z$=Z0$
numretry=0
LET C$=CPL(Z$,ERR=L2120); GOTO L2160
L2120: REM - CAN'T COMPILE LINE - CREATE ERROR LINE

LET E$=Z$; GOSUB L6500
L2160:
REM PRINT (1)Z$; GOTO L2060
m_content!.append(Z$+$0D0A$);GOTO L2060
L2200: REM " END OF PROGRAM LINES

rem add functions

 addFunctions:
lastLine=0 
rem lastline=num(z$(1,pos(" "=z$,1,1),err=*next)
call "addFunctions.bbj::addNEA",m_content!

print (1)m_content!.toString()
CLOSE (1)
GOTO L1000
L3000: REM 3000 -- DATA FILES
IF !(MULTI_TO_MKEYED) THEN OPEN (1)F$(9); LOCK (1)
LET REDEFINED=0
IF F$(2,1)=$00$ OR MULTI_TO_MKEYED THEN GOTO L3130
L3040: REM - LOOP FOR KEYED FILE
LET RECORDS=RECORDS+1;rem  IF MOD(RECORDS,1000)=0 THEN PRINT ".",
GOSUB L7000; IF Z$=EOF$ THEN GOTO L3210
GOSUB L25000
LET K0$=Z$
IF F$(7,2)=$0000$ THEN LET Z$="" ELSE GOSUB L7000; GOSUB L25000
WRITE RECORD(1,KEY=K0$,ERR=L3110)Z$; GOTO L3040
L3110: PRINT "!ERR=",ERR; ESCAPE
GOTO L3040
L3130: REM - LOOP FOR NON-KEYED FILES
LET RECORDS=RECORDS+1; rem IF MOD(RECORDS,1000)=0 THEN PRINT ".",
L3150: GOSUB L7000; IF Z$=EOF$ THEN GOTO L3210
GOSUB L25000
IF REDEFINED OR !(MULTI_TO_MKEYED) THEN GOTO L3180 ELSE GOSUB DEFINE_B4_MKEYED; GOTO L3150
L3180: WRITE RECORD(1,ERR=L3190)Z$; GOTO L3130
L3190: PRINT "!ERR=",ERR; ESCAPE
GOTO L3130
L3210: REM - END OF DATA FILE
CLOSE (1)
GOTO L1000
REM 5000 - Decipher FMTINFO() from B4 MULTI type.
DEFINE_B4_MKEYED: 
CALL "fmtinfo.src",F$,Z$,1,BBX_MKEY$,KEYNAMES$,FLAG$; IF FLAG$<>"OK" THEN ESCAPE
CLOSE (1); ERASE F$(9),ERR=L5040
L5040: IF VKEYED AND POS("MKEYED"=BBX_MKEY$)=1 THEN BBX_MKEY$(1,1)="V"
EXECUTE BBX_MKEY$
LET REDEFINED=1
OPEN (1)F$(9)
LOCK (1)
IF !(VKEYED) OR KEYNAMES$="" THEN RETURN
LET VKEYED!=bbjapi().getFileSystem().getFileInfo(1)
LET KEYS=POS($0A$=KEYNAMES$,1,0)
DIM KEY$:"NAME["+STR(KEYS)+"]:c(1*)"
LET KEY$=KEYNAMES$
FOR KEY=1 TO KEYS
VKEYED!.setKeyName(KEY-1,KEY.NAME$[KEY])
NEXT KEY
RETURN 
L6500: REM 6500 -- ERROR MESSAGE IN E$
LET ERRCOUNT=ERRCOUNT+1
m_errors!.append(F$(9))
m_errors!.append(": ")
m_errors!.append(E$)
m_errors!.append($0D0A$)
REM if mod(ERRCOUNT,20)=0 
REM     print(100)m_errors!.toString()
REM     m_errors! = new StringBuilder()
REM endif 
RETURN 
L6540: PRINT 'RB',"ERROR FILE (BXRCV.ERR) IS FULL"; GOTO L9000
L7000: REM 7000 -- FETCH NEXT BUFFER INTO Z$
IF LEN(B0$)>5 THEN GOTO L7070
IF B9$="COMM" THEN GOSUB L8000; GOTO L7050
READ RECORD(7,ERR=L7040,SIZ=128)B$;GOTO L7050
L7040: PRINT 'LF','RB',"UNABLE TO CONTINUE READING INPUT FILE!"; ESCAPE
L7050: LET B0$=B0$+B$
L7060: IF SENDER$="MSB" THEN LET CRLF=POS($0D0A$=B0$); IF CRLF THEN ESCAPE; LET B0$=BO$(1,CRLF-1)+B0$(CRLF+2); GOTO L7060; REM ' microshare
L7070: LET RECLEN=NUM(TBL(B0$(1,5),$7F$)),B0$=B0$(6)
L7080: IF RECLEN<=LEN(B0$) THEN GOTO L7110
IF B9$="COMM" THEN GOSUB L8000 ELSE READ RECORD(7,ERR=L7040,SIZ=128)B$
LET B0$=B0$+B$; GOTO L7080
L7110: LET Z$=B0$(1,RECLEN),B0$=B0$(RECLEN+1);origLine$=z$; RETURN 
L7500: REM 7500 -- INITIALIZE INPUT STREAM
DIM BEG80$(LEN(BEG$),$80$); LET BEG80$=IOR(BEG$,BEG80$),B0$=""
L7520: IF B9$="COMM" THEN GOSUB L8000 ELSE READ RECORD(7,SIZ=128,ERR=L7570)B$
LET B0$=B0$+B$,Z=POS(BEG$=B0$); IF Z=0 THEN LET Z=POS(BEG80$=B0$)
IF Z=0 THEN LET B0$=B0$(100); GOTO L7520
IF B0$(Z,1)>$80$ THEN DIM Z$(LEN(EOF$),$80$); LET EOF$=IOR(EOF$,Z$)
LET B0$=B0$(Z+11); RETURN 
L7570: PRINT 'RB',"FILE NOT CREATED BY BXSND"
LET B0$="NO"; RETURN 
L8000: REM 8000" RECEIVE A 128-BYTE DATA PACKET
READ RECORD(7,SIZ=1,ERR=L8580,TIM=60)Z1$
PRINT (7)"Y",
LET TOT=4+256+2
DIM Z1$(TOT)
REM " READ THE PACKET A CHUNK AT A TIME
L8060: LET Z1=1
L8070: LET Z=LEN(Z1$(Z1)); IF Z>B1 THEN LET Z=B1
LET RTY=0
L8090: READ RECORD(7,SIZ=Z,TIM=2,ERR=L8100)Z1$(Z1,Z); GOTO L8170
L8100: LET RTY=RTY+1; IF RTY=3 THEN GOTO L8130
PRINT "x",
L8120: PRINT (7)"N",; GOTO L8090
L8130: IF B2>0 THEN LET B2=B2-1,B1=2^B2
READ RECORD(7,SIZ=1000,TIM=1,ERR=L8150)Z9$
L8150: PRINT "(",STR(B1),")",
PRINT (7)STR(B2),; GOTO L8060
L8170: LET Z1=Z1+Z; IF Z1<=LEN(Z1$) THEN PRINT (7)"Y",; GOTO L8070
REM " WE HAVE THE WHOLE THING - IS IT ANY GOOD
LET Z1$=TBL(Z1$,$7F$)
LET Z=NUM(Z1$(1,4),ERR=L8230),B$=ATH(Z1$(5),ERR=L8230),SUM$=B$(129,1),B$=B$(1,128)
LET B2$=LRC(B$)
IF Z=B0 AND SUM$=B2$ THEN GOTO L8240
L8230: GOTO L8120
L8240: PRINT (7)"Y",
LET B0=B0+1; IF B0>9999 THEN LET B0=0
RETURN 
L8500: REM 8500" INITIALIZE COMM IN
PRINT "ATTEMPTING TO ESTABLISH COMMUNICATIONS WITH SENDING PROGRAM..."
REM " CLEAR INPUT BUFFER
READ RECORD(7,SIZ=1000,TIM=1,ERR=L8540)Z9$
L8540: REM " SAY WE'RE READY TO RECEIVE
PRINT (7)"B",
REM ' Might need to change this timeout for BOSS/VS
L8570: READ RECORD(7,SIZ=1,TIM=10,ERR=L8580)Z9$; GOTO L8590
L8580: PRINT 'LF','RB',"TIMED OUT ON READ"; STOP
L8590: IF AND(Z9$,$7F$)<>"Y" THEN GOTO L8570
LET B0=0,B1=256,B2=8
RETURN 
L9000: REM 9000 - DONE

open(100,mode="O_APPEND")m_error$ 
lock(100)
print(100)m_errors!.toString()
unlock(100)
close(100)
close(7) 

declare BBjNamespace ns! 
ns! = bbjapi().getGroupNamespace()
ns!.setLock("counter",5000,err=release_me) 
counter=ns!.getValue("counter",err=release_me) 
ns!.setValue("counter",counter-1)
ns!.removeLock("counter")
release_me:
release 


PRINT 'LF',ERRCOUNT," ERROR(S) LOGGED"
STOP
L10000: REM 10000 -- INITIALIZE FOR PARTICULAR SENDER
LET VKEYED=0
REM -- CHECK FOR RECEIVING FROM UPPER ASCII BASIC
LET HIBIT$=""
L10030: IF EOF$>$80$ THEN INPUT (0,ERR=L10030)"TOGGLE HIGH BITS ON ALL DATA AND KEYS? (Y/N): ",Z$:("Y"=L10040,"y"=L10040,"N"=L10050,"n"=L10050) ELSE GOTO L10050
L10040: LET HIBIT$="ALL"; GOTO L10050
L10050: IF SENDER$="BI" THEN GOTO L12000
IF SENDER$="SMC" OR SENDER$="TBD" OR SENDER$="PVX" OR SENDER$="MSB" THEN GOTO L13000
IF SENDER$="REXON" THEN GOTO L12500
IF SENDER$="OB" THEN GOTO L13500
IF SENDER$="PRT" THEN GOTO L14000
RETURN 
L12000: REM 12000 -- SETUP FOR BI
PRINT 'LF',"BUILDING KEYWORD TABLE..."
LET W$=""
LET W$=W$+"/RUN/LOAD/ESCAPE/SETESC/EDIT/DELETE/LIST/MERGE/RENUMBER/SAVE"
LET W$=W$+"/PROTECT/REM/RENAME/COPY/RESET/CLEAR/BEGIN/NEW/STOP/END/GOTO"
LET W$=W$+"/ON/GOSUB/RETURN/FOR/NEXT/EXITTO/IF/SETERR/RETRY/LET/DIM/PRE"
LET W$=W$+"CISION/DEF/FN/ASC/CHR/LST/STR/NUM/FPT/ABS/INT/SGN/LEN/POS/ER"
LET W$=W$+"R/DSZ/PSZ/CTL/RND/SYS/TCB/OSV/PGN/INDEXED/DIRECT/SORT/PROGRA"
LET W$=W$+"M/SERIAL/ERASE/DISABLE/ENABLE/OPEN/CLOSE/LOCK/FID/DIR/IOLIST"
LET W$=W$+"/IOL/DOM/IND/KEY/INPUT/PRINT/UNLOCK/WRITE/READ/RECORD/FIND/E"
LET W$=W$+"XTRACT/REMOVE/TIM/SETTIME/FLOATINGPOINT/EXPAND/TRACE/TRACEOF"
LET W$=W$+"F/AND/OR/TO/STEP/TABLE/SETDAY/DAY/SIZ/"
REM " BUILD STRING OF KEYWORDS ARRANGED BY LENGTH 
LET W=2
LET K$=$0102030405060708090A0B0C0D0E0F$
L12150: LET Z=POS("/"=W$(W))-1
LET Z1=POS(CHR(Z)=K$)
LET K$=K$(1,Z1)+W$(W,Z)+K$(Z1+1)
LET W=W+Z+1
IF W<LEN(W$) THEN GOTO L12150
REM " WE DON'T NEED W$ ANYMORE 
LET W$=""
REM " BUILD INDEX TABLE TO KEY WORD STRING 
REM " O(X)=OFFSET OF KEYWORDS LENGTH X, L(X)=LENGTH OF ALL THOSE WORDS 
DIM O[15],L[15]
LET K=2,O=1
L12260: LET O[O]=K
LET Z=POS(" ">K$(K))
LET L[O]=Z-1
LET K=K+Z,O=O+1
IF K<=LEN(K$) THEN GOTO L12260
RETURN 
L12500: REM 12500 -- SETUP FOR REXON
PRINT 'LF',"BUILDING KEYWORD TABLE..."
LET W$=""
LET W$=W$+"/RUN/LOAD/ESCAPE/SETESC/EDIT/DELETE/LIST/MERGE/RENUMBER/SAVE"
LET W$=W$+"/PROTECT/REM/RENAME/COPY/RESET/CLEAR/BEGIN/NEW/STOP/END/GOTO"
LET W$=W$+"/ON/GOSUB/RETURN/FOR/NEXT/EXITTO/IF/SETERR/RETRY/LET/DIM/PRE"
LET W$=W$+"CISION/DEF/FN/ASC/CHR/LST/STR/NUM/FPT/ABS/INT/SGN/LEN/POS/ER"
LET W$=W$+"R/DSZ/PSZ/CTL/RND/SYS/TCB/OSV/PGN/INDEXED/DIRECT/SORT/PROGRA"
LET W$=W$+"M/SERIAL/ERASE/DISABLE/ENABLE/OPEN/CLOSE/LOCK/FID/DIR/IOLIST"
LET W$=W$+"/IOL/DOM/IND/KEY/INPUT/PRINT/UNLOCK/WRITE/READ/RECORD/FIND/E"
LET W$=W$+"XTRACT/REMOVE/TIM/SETTIME/FLOATINGPOINT/EXPAND/TRACE/TRACEOF"
LET W$=W$+"F/AND/OR/TO/STEP/TABLE/SETDAY/DAY/SIZ/THEN/HTA/BIN/DEC/EXECU"
LET W$=W$+"TE/ELSE/CALL/ENTER/EXIT/RELEASE/SYSTEM/STP/ERS/"
REM " BUILD STRING OF KEYWORDS ARRANGED BY LENGTH 
LET W=2
LET K$=$0102030405060708090A0B0C0D0E0F$
L12660: LET Z=POS("/"=W$(W))-1
LET Z1=POS(CHR(Z)=K$)
LET K$=K$(1,Z1)+W$(W,Z)+K$(Z1+1)
LET W=W+Z+1
IF W<LEN(W$) THEN GOTO L12660
REM " WE DON'T NEED W$ ANYMORE 
LET W$=""
REM " BUILD INDEX TABLE TO KEY WORD STRING 
REM " O(X)=OFFSET OF KEYWORDS LENGTH X, L(X)=LENGTH OF ALL THOSE WORDS 
DIM O[15],L[15]
LET K=2,O=1
L12770: LET O[O]=K
LET Z=POS(" ">K$(K))
LET L[O]=Z-1
LET K=K+Z,O=O+1
IF K<=LEN(K$) THEN GOTO L12770
RETURN 
L13000: REM 13000 -- SETUP FOR TBD/SMC/PVX/MSB
IF HIBIT$<>"" THEN RETURN 
L13020: gosub L13030;rem INPUT (0,ERR=L13020)"CHANGE $8A$ TO $0A$ IN DATA RECORDS? (Y/N): ",Z$:("Y"=L13030,"y"=L13030,"N"=L13040,"n"=L13040)
L13030: LET HIBIT$="LF"
L13040: RETURN 
L13500: REM 13500 -- SETUP FOR OB
PRINT "(BBj VKEYED files support named keys.)"
l13510: INPUT (0,ERR=L13510)"IMPORT OB MULTI FILES AS BBJ VKEYED? (Y/N): ",Z$:("Y"=L13520,"y"=L13520,"N"=L13520,"n"=L13520)
L13520: LET VKEYED=CVS(Z$,4)="Y"
RETURN
L14000: REM 14000 -- SETUP FOR PERTEC
IF HIBIT$<>"" THEN RETURN 
L14020: INPUT (0,ERR=L14020)"CHANGE $0D$ TO $0A$ IN DATA RECORDS? (Y/N): ",Z$:("Y"=L14030,"y"=L14030,"N"=L14040,"n"=L14040)
L14030: LET HIBIT$="LF"
L14040: RETURN 
L15000: REM 15000 -- CONVERT PGM LINES FOR PARTICULAR SENDER
REM -- Z$ IN, Z0$ OUT
REM -- STRIP HIGH BITS IF NECESSARY
IF EOF$>$80$ THEN LET Z$=TBL(Z$,$7F$)
IF SENDER$="BI" THEN GOTO L16000
IF SENDER$="SMC" OR SENDER$="TBD" THEN GOTO L16500
IF SENDER$="BB3" OR SENDER$="S10" THEN GOTO L17400
IF SENDER$="VS" THEN GOTO L17500
IF SENDER$="BB7" THEN GOTO L18000
IF SENDER$="REXON" THEN GOTO L18500
IF SENDER$="PRT" THEN GOTO L19000
IF SENDER$="OB" THEN GOTO L19500
IF SENDER$="PVX" THEN GOTO L15500
IF SENDER$="MSB" THEN GOTO L15200
LET Z0$=Z$; RETURN 
L15200: REM 15200,2 -- Convert for MicroShare
LET Z0$=""
L15204: GOSUB L20000
LET V0$=" (",V1$="("; GOSUB L20200
LET V0$="'B0'",V1$="'BACKGR','BLACK'"; GOSUB L20200
LET V0$="'B1'",V1$="'BACKGR','BLUE'"; GOSUB L20200
LET V0$="'B2'",V1$="'BACKGR','GREEN'"; GOSUB L20200
LET V0$="'B3'",V1$="'BACKGR','CYAN'"; GOSUB L20200
LET V0$="'B4'",V1$="'BACKGR','RED'"; GOSUB L20200
LET V0$="'B5'",V1$="'BACKGR','MAGENTA'"; GOSUB L20200
LET V0$="'B6'",V1$="'BACKGR','YELLOW'"; GOSUB L20200
LET V0$="'B7'",V1$="'BACKGR','WHITE'"; GOSUB L20200
LET V0$="'C0'",V1$="'BLACK'"; GOSUB L20200
LET V0$="'C1'",V1$="'BLUE'"; GOSUB L20200
LET V0$="'C2'",V1$="'GREEN'"; GOSUB L20200
LET V0$="'C3'",V1$="'CYAN'"; GOSUB L20200
LET V0$="'C4'",V1$="'RED'"; GOSUB L20200
LET V0$="'C5'",V1$="'MAGENTA'"; GOSUB L20200
LET V0$="'C6'",V1$="'YELLOW'"; GOSUB L20200
LET V0$="'C7'",V1$="'WHITE'"; GOSUB L20200
LET V0$="'CB'",V1$="'CB?'"; GOSUB L20200
LET V0$="'CC'",V1$="'CC?'"; GOSUB L20200
LET V0$="'CD'",V1$="'DC'"; GOSUB L20200
LET V0$="'D0'",V1$="'BACKGR','BLACK','DEFAULT'"; GOSUB L20200
LET V0$="'D1'",V1$="'BACKGR','BLUE','DEFAULT'"; GOSUB L20200
LET V0$="'D2'",V1$="'BACKGR','GREEN','DEFAULT'"; GOSUB L20200
LET V0$="'D3'",V1$="'BACKGR','CYAN','DEFAULT'"; GOSUB L20200
LET V0$="'D4'",V1$="'BACKGR','RED','DEFAULT'"; GOSUB L20200
LET V0$="'D5'",V1$="'BACKGR','MAGENTA','DEFAULT'"; GOSUB L20200
LET V0$="'D6'",V1$="'BACKGR','YELLOW','DEFAULT'"; GOSUB L20200
LET V0$="'D7'",V1$="'BACKGR','WHITE','DEFAULT'"; GOSUB L20200
LET V0$="'DF'",V1$="'DEFAULT'"; GOSUB L20200
LET V0$="'G0'",V1$="'GS',""0"",'GE'"; GOSUB L20200
LET V0$="'G1'",V1$="'GS',""1"",'GE'"; GOSUB L20200
LET V0$="'G2'",V1$="'GS',""2"",'GE'"; GOSUB L20200
LET V0$="'G3'",V1$="'GS',""3"",'GE'"; GOSUB L20200
LET V0$="'G4'",V1$="'GS',""4"",'GE'"; GOSUB L20200
LET V0$="'G5'",V1$="'GS',""5"",'GE'"; GOSUB L20200
LET V0$="'G6'",V1$="'GS',"":"",'GE'"; GOSUB L20200
LET V0$="'G7'",V1$="'GS',""7"",'GE'"; GOSUB L20200
LET V0$="'G8'",V1$="'GS',""6"",'GE'"; GOSUB L20200
LET V0$="'G9'",V1$="'GS',""9"",'GE'"; GOSUB L20200
LET V0$="'GA'",V1$="'GS',""8"",'GE'"; GOSUB L20200
LET V0$="'GB'",V1$="'GB?'"; GOSUB L20200
LET V0$="'QR'",V1$="'EO'"; GOSUB L20200
LET V0$="'SR'",V1$="'BO'"; GOSUB L20200
LET V0$="'UR'",V1$="'LC'"; GOSUB L20200
LET V0$="'US'",V1$="'UC'"; GOSUB L20200
LET V0$="'WC'",V1$="'PUSH'"; GOSUB L20200
LET V0$="'WD'",V1$="'DROP'"; GOSUB L20200
LET V0$="'WF'",V1$="'SCROLL'(""OFF"")"; GOSUB L20200
LET V0$="'WG'",V1$="'GOTO'"; GOSUB L20200
LET V0$="'WL'",V1$="'WINDOW'(""LIST"")"; GOSUB L20200
LET V0$="'WM'",V1$="'MOVE'"; GOSUB L20200
LET V0$="'WN'",V1$="'WINDOW'"; GOSUB L20200
LET V0$="'WO'",V1$="'SCROLL'(""ON""),'WRAP'(""ON"")"; GOSUB L20200
LET V0$="'WQ'",V1$="'POP'"; GOSUB L20200
LET V0$="'WR'",V1$="'SCROLL'"; GOSUB L20200
LET V0$="'WS'",V1$="'SWAP'"; GOSUB L20200
LET V0$="'WW'",V1$="'WRAP'(""OFF"")"; GOSUB L20200
LET V0$="'WX'",V1$="'BOX'"; GOSUB L20200
LET V0$="'XB'",V1$="'CURSOR'(""INS""),'CURSOR'(""ON"")"; GOSUB L20200
LET V0$="'XO'",V1$="'CURSOR'(""OFF"")"; GOSUB L20200
LET V0$="'XU'",V1$="'CURSOR'(""REP""),'CURSOR'(""ON"")"; GOSUB L20200
LET V0$="(ALL)",V1$="[ALL]"; GOSUB L20200
LET V0$=",BNK=0",V1$=""; GOSUB L20200
LET V0$=",BNK=1",V1$=""; GOSUB L20200
LET V0$=",BNK=2",V1$=""; GOSUB L20200
LET V0$=",ISZ=1",V1$=",ISZ=-1"; GOSUB L20200
LET V0$="BSZ(0)",V1$="DSZ"; GOSUB L20200
LET V0$="BSZ(1)",V1$="DSZ"; GOSUB L20200
LET V0$="BSZ(2)",V1$="DSZ"; GOSUB L20200
LET V0$="BSZ(",V1$="BSZ?("; GOSUB L20200
LET V0$="ESC",V1$="$1B$"; GOSUB L20200
LET V0$="FALSE(",V1$="!("; GOSUB L20200
LET V0$="FIB(",V1$="FID("; GOSUB L20200
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0)",V1$="FID(0)"; GOSUB L20200
LET V0$="OPTS",V1$="OPTS?"; GOSUB L20200
LET V0$="PGN",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PUB(",V1$="PUB?("; GOSUB L20200
LET V0$="PUBV(0)",V1$="PGM(-1)"; GOSUB L20200
LET V0$="PUBV(PUBC)",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PUBV(",V1$="PUBV?("; GOSUB L20200
LET V0$="QUO",V1$="$22$"; GOSUB L20200
LET V0$="SDAY",V1$="DATE(0)"; GOSUB L20200
REM LET V0$="SEP",V1$="$0A$"; GOSUB L20200
LET V0$="SERIAL",V1$="STRING"; GOSUB L20200
LET V0$="SETOPTS",V1$="SETOPTS?"; GOSUB L20200
LET V0$="SET PATH=",V1$="PREFIX"; GOSUB L20200
LET V0$="SET DPATH=",V1$="PREFIX?"; GOSUB L20200
LET V0$="SET PPATH=",V1$="PREFIX?"; GOSUB L20200
LET V0$="DPATH",V1$="PFX?"; GOSUB L20200
LET V0$="PPATH",V1$="PFX?"; GOSUB L20200
LET V0$="PATH",V1$="PFX"; GOSUB L20200
LET V0$="TCB(",V1$="TCB?("; GOSUB L20200
LET V0$="TCB?(2)",V1$="UNT"; GOSUB L20200
LET V0$="TCB?(5)",V1$="TCB(5)"; GOSUB L20200
LET V0$="TCB?(22)",V1$="DEC(INFO(2,0))"; GOSUB L20200
LET V0$="TCB?(3)",V1$="ERR"; GOSUB L20200
LET V0$="TCB?(31)",V1$="TCB(14)"; GOSUB L20200
LET V0$="TCB?(8)",V1$="DSZ"; GOSUB L20200
LET V0$="TCB?(9)",V1$="DSZ"; GOSUB L20200
LET V0$="TSK(",V1$="TSK?("; GOSUB L20200
LET V0$="TSKB(",V1$="TSK("; GOSUB L20200
LET V0$="ERL",V1$="TCB(5)"; GOSUB L20200
LET V0$="PUBC",V1$="TCB(13)"; GOSUB L20200
LET Z0$=Z0$+Z1$
GOSUB L20100; escape;LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L15204
RETURN 
L15500: REM 15500,2 -- convert for ProvideX
LET Z0=MASK("","^[0-9]+[ ][;][ ]")
LET Z0$=""
L15504: GOSUB L20000
REM "In each chunk Z1$, convert V0$ to V1$
LET V0$=" ! ",V1$=" ; REM "; GOSUB L20200
LET V0$=": ; REM ",V1$=": REM "; GOSUB L20200
LET V0$="'B0'",V1$="'BACKGR','BLACK'"; GOSUB L20200
LET V0$="'B1'",V1$="'BACKGR','RED'"; GOSUB L20200
LET V0$="'B2'",V1$="'BACKGR','GREEN'"; GOSUB L20200
LET V0$="'B3'",V1$="'BACKGR','YELLOW'"; GOSUB L20200
LET V0$="'B4'",V1$="'BACKGR','BLUE'"; GOSUB L20200
LET V0$="'B5'",V1$="'BACKGR','MAGENTA'"; GOSUB L20200
LET V0$="'B6'",V1$="'BACKGR','CYAN'"; GOSUB L20200
LET V0$="'B7'",V1$="'BACKGR','WHITE'"; GOSUB L20200
LET V0$="'BK'",V1$="'BACKGR'"; GOSUB L20200
LET V0$="'BW'",V1$="'WRAP'(""ON"")"; GOSUB L20200
LET V0$="'BX'",V1$="'BOX'"; GOSUB L20200
LET V0$="'C0'",V1$="'CURSOR'(""OFF"")"; GOSUB L20200
LET V0$="'C1'",V1$="'CURSOR'(""REP""),'CURSOR'(""ON"")"; GOSUB L20200
LET V0$="'C2'",V1$="'CURSOR'(""INS""),'CURSOR'(""ON"")"; GOSUB L20200
LET V0$="'CAPTION'",V1$="'TITLE'"; GOSUB L20200
LET V0$="'CIRCLE'",V1$="'ARC'"; GOSUB L20200
LET V0$="'CURSOR'(0)",V1$="'SETCURSOR'(0?)"; GOSUB L20200
LET V0$="'CURSOR'(1)",V1$="'SETCURSOR'(3)"; GOSUB L20200
LET V0$="'CURSOR'(2)",V1$="'SETCURSOR'(2)"; GOSUB L20200
LET V0$="'CURSOR'(3)",V1$="'SETCURSOR'(1)"; GOSUB L20200
LET V0$="'CURSOR'(4)",V1$="'SETCURSOR'(4?)"; GOSUB L20200
LET V0$="'CURSOR'(5)",V1$="'SETCURSOR'(5?)"; GOSUB L20200
LET V0$="'CURSOR'(6)",V1$="'SETCURSOR'(6?)"; GOSUB L20200
LET V0$="'CURSOR'(7)",V1$="'SETCURSOR'(7?)"; GOSUB L20200
LET V0$="'CURSOR'(8)",V1$="'SETCURSOR'(8?)"; GOSUB L20200
LET V0$="'CURSOR'(9)",V1$="'SETCURSOR'(9?)"; GOSUB L20200
LET V0$="'CURSOR'(10)",V1$="'SETCURSOR'(10?)"; GOSUB L20200
LET V0$="'CURSOR'(11)",V1$="'SETCURSOR'(11?)"; GOSUB L20200
LET V0$="'DF'",V1$="'DEFAULT'"; GOSUB L20200
LET V0$="'DIALOGUE'",V1$="'WINDOW'"; GOSUB L20200
LET V0$="'DO'",V1$="'DESTROY'(0)"; GOSUB L20200
LET V0$="'EW'",V1$="'WRAP'(""OFF"")"; GOSUB L20200
LET V0$="'F0'",V1$="'BLACK'"; GOSUB L20200
LET V0$="'F1'",V1$="'RED'"; GOSUB L20200
LET V0$="'F2'",V1$="'GREEN'"; GOSUB L20200
LET V0$="'F3'",V1$="'YELLOW'"; GOSUB L20200
LET V0$="'F4'",V1$="'BLUE'"; GOSUB L20200
LET V0$="'F5'",V1$="'MAGENTA'"; GOSUB L20200
LET V0$="'F6'",V1$="'CYAN'"; GOSUB L20200
LET V0$="'F7'",V1$="'WHITE'"; GOSUB L20200
LET V0$="'LINE'",V1$="'POLYLINE'"; GOSUB L20200
LET V0$="'PICTURE'",V1$="'IMAGE'"; GOSUB L20200
LET V0$="'PIE'",V1$="'ARC'"; GOSUB L20200
LET V0$="'RECTANGLE'",V1$="'RECT'"; GOSUB L20200
LET V0$="'SD'",V1$="'SCROLL'(""OFF"")"; GOSUB L20200
LET V0$="'SE'",V1$="'SCROLL'(""ON"")"; GOSUB L20200
LET V0$="'SHOW'(-1)",V1$="'HIDE'"; GOSUB L20200
LET V0$="'SHOW'(0)",V1$="'MINIMIZE'"; GOSUB L20200
LET V0$="'SHOW'(1)",V1$="'SHOW'"; GOSUB L20200
LET V0$="'SHOW'(2)",V1$="'MAXIMIZE'"; GOSUB L20200
LET V0$="'SR'",V1$="'SCROLL'(""RESET"")"; GOSUB L20200
LET V0$="'TEXTWDW'",V1$="'WINDOW'"; GOSUB L20200
LET V0$="'TW'",V1$="'WINDOW'(""LIST"")"; GOSUB L20200
LET V0$="'WA'",V1$="'WINDOW'"; GOSUB L20200
LET V0$="'WC'",V1$="'PUSH'"; GOSUB L20200
LET V0$="'WD'",V1$="'DROP'"; GOSUB L20200
LET V0$="'WG'",V1$="'GOTO'"; GOSUB L20200
LET V0$="'WR'",V1$="'POP'"; GOSUB L20200
LET V0$="'WS'",V1$="'SWAP'"; GOSUB L20200
LET V0$="'_BLACK'",V1$="'BACKGR','BLACK'"; GOSUB L20200
LET V0$="'_BLUE'",V1$="'BACKGR','BLUE'"; GOSUB L20200
LET V0$="'_CYAN'",V1$="'BACKGR','CYAN'"; GOSUB L20200
LET V0$="'_GREEN'",V1$="'BACKGR','GREEN'"; GOSUB L20200
LET V0$="'_MAGENTA'",V1$="'BACKGR','MAGENTA'"; GOSUB L20200
LET V0$="'_RED'",V1$="'BACKGR','RED'"; GOSUB L20200
LET V0$="'_WHITE'",V1$="'BACKGR','WHITE'"; GOSUB L20200
LET V0$="'_YELLOW'",V1$="'BACKGR','YELLOW'"; GOSUB L20200
LET V0$="ARG(",V1$="ARGV("; GOSUB L20200
LET V0$="BKG",V1$="(FID(0)=""IO"")"; GOSUB L20200
LET V0$="CWDIR",V1$="CHDIR"; GOSUB L20200
LET V0$="DEFAULT",V1$="CASE DEFAULT"; GOSUB L20200
LET V0$="'CASE DEFAULT'",V1$="'DEFAULT'"; GOSUB L20200
LET V0$="DIM(",V1$="FILL("; GOSUB L20200
LET V0$="DIRECTORY",V1$="MKDIR"; GOSUB L20200
LET V0$="DLM",V1$="""/"""; GOSUB L20200
LET V0$="DTE(",V1$="DATE("; GOSUB L20200
LET V0$="END DEF",V1$="FNEND"; GOSUB L20200
LET V0$="END SWITCH",V1$="SWEND"; GOSUB L20200
LET V0$="END_IF",V1$="FI"; GOSUB L20200
LET V0$="ENV(",V1$="INFO(4,"; GOSUB L20200
LET V0$="ESC",V1$="$1B$"; GOSUB L20200
LET V0$="EVN(",V1$="NEVAL("; GOSUB L20200
LET V0$="EVS(",V1$="SEVAL("; GOSUB L20200
LET V0$="FIB(",V1$="FID?("; GOSUB L20200
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0)",V1$="FID(0)"; GOSUB L20200
LET V0$="FIN(",V1$="FIN?("; GOSUB L20200
LET V0$="FLOATING POINT",V1$="FLOATINGPOINT"; GOSUB L20200
LET V0$="GBL(DELETE",V1$="STBL(""!CLEAR"","; GOSUB L20200
LET V0$="GBL(DELETE *)",V1$="STBL(""!CLEARALL"")"; GOSUB L20200
LET V0$="GBL(DELETE TO",V1$="STBL(""!CLEARTO"","; GOSUB L20200
LET V0$="GBL(LIST *)",V1$="STBL(""!LIST"")"; GOSUB L20200
LET V0$="GBL(",V1$="STBL("; GOSUB L20200
LET V0$="GFN",V1$="UNT"; GOSUB L20200
LET V0$="GID",V1$="INFO(3,0)"; GOSUB L20200
LET V0$="HFN",V1$="UNT"; GOSUB L20200
LET V0$="KEF(",V1$="KEYF("; GOSUB L20200
LET V0$="KEL(",V1$="KEYL("; GOSUB L20200
LET V0$="KEN(",V1$="KEYN("; GOSUB L20200
LET V0$="KEP(",V1$="KEYP("; GOSUB L20200
LET V0$="KEYED",V1$="MKEYED"; GOSUB L20200
LET V0$="KGN(",V1$="KGEN("; GOSUB L20200
LET V0$="KNO=",V1$="KNUM="; GOSUB L20200
LET V0$="LWD",V1$="DSK("""")+DIR("""")"; GOSUB L20200
LET V0$="MSG(",V1$="ERRMES("; GOSUB L20200
LET V0$="MSK(",V1$="MASK("; GOSUB L20200
LET V0$="NAR",V1$="(ARGC-1)"; GOSUB L20200
LET V0$="NID",V1$="INFO(3,4)"; GOSUB L20200
LET V0$="OBTAIN",V1$="INPUT"; GOSUB L20200
LET V0$="OPEN INPUT",V1$="OPEN"; GOSUB L20200
LET V0$="OPEN LOAD",V1$="OPEN"; GOSUB L20200
rem LET V0$="OPT=",V1$="MODE?="; GOSUB L20200
LET V0$="PERFORM",V1$="CALL"; GOSUB L20200
LET V0$="PFX(",V1$="DIR("; GOSUB L20200
LET V0$="PGM(-1)",V1$="PGM(-1)"; GOSUB L20200
LET V0$="PGM(-2)",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PGN",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PRC(",V1$="ROUND("; GOSUB L20200
LET V0$="PUB(",V1$="PUB?("; GOSUB L20200
LET V0$="QUIT",V1$="RELEASE"; GOSUB L20200
LET V0$="QUO",V1$="$22$"; GOSUB L20200
LET V0$="READ DATA",V1$="DREAD"; GOSUB L20200
LET V0$="REFILE",V1$="INITFILE"; GOSUB L20200
LET V0$="RENUMBER",V1$="RENUM"; GOSUB L20200
LET V0$="RND",V1$="RND(0)"; GOSUB L20200
LET V0$="RND(0)(",V1$="RND("; GOSUB L20200
REM LET V0$="SEP",V1$="$0A$"; GOSUB L20200
LET V0$="SERIAL",V1$="STRING"; GOSUB L20200
LET V0$="SETESC DISABLE",V1$="ESCOFF"; GOSUB L20200
LET V0$="SETESC ENABLE",V1$="ESCON"; GOSUB L20200
LET V0$="SETESC OFF",V1$="ESCOFF"; GOSUB L20200
LET V0$="SETESC ON",V1$="ESCON"; GOSUB L20200
LET V0$="SID",V1$="INFO(0,0)"; GOSUB L20200
LET V0$="SRT(",V1$="SSORT("; GOSUB L20200
LET V0$="SWP(",V1$="SWAP("; GOSUB L20200
LET V0$="SYS(",V1$="SCALL("; GOSUB L20200
LET V0$="TCB(",V1$="TCB?("; GOSUB L20200
LET V0$="TCB?(0)",V1$="TCB(0)"; GOSUB L20200
LET V0$="TCB?(1)",V1$="TCB(1)"; GOSUB L20200
LET V0$="TCB?(2)",V1$="TCB(2)"; GOSUB L20200
LET V0$="TCB?(3)",V1$="TCB(3)"; GOSUB L20200
LET V0$="TCB?(4)",V1$="TCB(4)"; GOSUB L20200
LET V0$="TCB?(5)",V1$="TCB(5)"; GOSUB L20200
LET V0$="TCB?(6)",V1$="TCB(6)"; GOSUB L20200
LET V0$="TCB?(7)",V1$="TCB(7)"; GOSUB L20200
LET V0$="TCB?(8)",V1$="TCB(8)"; GOSUB L20200
LET V0$="TCB?(9)",V1$="TCB(9)"; GOSUB L20200
LET V0$="TCB?(10)",V1$="TCB(10)"; GOSUB L20200
LET V0$="TCB?(14)",V1$="TCB(14)"; GOSUB L20200
LET V0$="TCB?(15)",V1$="TCB(15)"; GOSUB L20200
LET V0$="TCB?(16)",V1$="TCB(16)"; GOSUB L20200
LET V0$="TCB?(17)",V1$="TCB(17)"; GOSUB L20200
LET V0$="TCB?(23)",V1$="DEC(INFO(2,0))"; GOSUB L20200
LET V0$="TCB?(24)",V1$="DEC(INFO(2,1))"; GOSUB L20200
LET V0$="ERS",V1$="TCB(5)"; GOSUB L20200
LET V0$="LFA",V1$="TCB(12)"; GOSUB L20200
LET V0$="MSL",V1$="TCB(16)"; GOSUB L20200
LET V0$="PRC",V1$="TCB(14)"; GOSUB L20200
LET V0$="RET",V1$="TCB(10)"; GOSUB L20200
LET V0$="TME",V1$="TIM"; GOSUB L20200
LET V0$="TMS",V1$="NUM(DATE(0:""%s""))"; GOSUB L20200
LET V0$="TSK(",V1$="TB.TSK("; GOSUB L20200
LET V0$="UID",V1$="INFO(3,2)"; GOSUB L20200
LET V0$="VIA",V1$="FIELD"; GOSUB L20200
LET V0$="VIN(",V1$="NFIELD("; GOSUB L20200
LET V0$="VIS(",V1$="FIELD("; GOSUB L20200
LET V0$="WHO",V1$="INFO(3,2)"; GOSUB L20200
LET V0$="WRITE LOCK",V1$="WRITE?"; GOSUB L20200
LET V0$="XFA(",V1$="FATTR("; GOSUB L20200
LET V0$="{ALL}",V1$="[ALL]"; GOSUB L20200
LET V0$="=*END",V1$="=65534"; GOSUB L20200
LET Z0$=Z0$+Z1$
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L15504
IF MASK(Z0$) THEN LET Z0$=Z0$(1,TCB(16)-3)+Z0$(TCB(16)); REM ' fixup from ! conversions: change "0000 ; REM " to "0000 REM "
LET Z1$=Z0$
LET V0$="=*SAME",V1$="="+STR(NUM(Z0$(1,5))); GOSUB L20200
LET V0$="=*NEXT",V1$="="+STR(NUM(Z0$(1,5))+1); GOSUB L20200
LET Z0$=Z1$
RETURN 
L16000: REM 16000,5 -- BI CONVERT.  PARSE KEYWORDS AND INSERT SPACES
REM -- REMOVE SPACE AFTER VERB
LET Z=POS(" "=Z$,1,2); IF Z THEN LET Z$=Z$(1,Z-1)+Z$(Z+1)
LET Z0$=Z$(1,4),Z$=Z$+" ",Z=5; REM " ADD SPACE TO Z$ FOR CONVENIENCE 
L16020: REM " SCAN LOOP 
IF Z>=LEN(Z$) THEN RETURN 
LET Z9$=Z$(Z,1)
IF Z9$>="A" AND Z9$<="Z" THEN GOTO L16115
IF Z9$=$22$ OR Z9$="$" OR Z9$="'" THEN GOTO L16060
IF Z9$="!" THEN GOTO L16095
LET Z0$=Z0$+Z9$,Z=Z+1
GOTO L16020
L16060: REM " QUOTES, HEX CONSTANT, OR MNEMONIC 
LET Z9=POS(Z9$=Z$(Z),1,2)
IF Z9=0 THEN GOTO L16085
LET Z0$=Z0$+Z$(Z,Z9),Z=Z+Z9
GOTO L16020
L16085: LET Z0$=Z0$+Z$(Z),Z=Z+10000
GOTO L16020
L16095: REM " BANG ENCOUNTERED 
IF Z>6 THEN LET Z0$=Z0$+"; "
LET Z0$=Z0$+"REM "+Z$(Z+1),Z=Z+10000
GOTO L16020
L16115: REM " ALPHA ENCOUNTERED 
REM " TRY FOR KEYWORD 
LET Z1=POS("A">Z$(Z)),Z2=POS("Z"<Z$(Z))
IF Z2 AND Z2<Z1 THEN LET Z1=Z2
LET Z1=Z1-1
IF Z1>14 THEN LET Z1=14
L16145: IF Z1<2 THEN GOTO L16255
IF POS(Z$(Z,Z1)=K$(O[Z1],L[Z1]),Z1) THEN GOTO L16165
LET Z1=Z1-1
GOTO L16145
L16165: LET Z9$=Z$(Z,Z1),Z=Z+Z1
REM " WE HAVE KEYWORD - CHECK FOR SPECIAL CASES 
IF Z9$<>"FOR" OR LEN(Z0$)<6 THEN GOTO L16195
REM " DON'T ALLOW FOR EXCEPT AS FIRST WORD (I.E. IF I=F OR J=K...) 
LET Z=Z-3
GOTO L16255
L16195: IF Z9$="TRACE" THEN LET Z9$="SETTRACE"
IF Z9$="TRACEOFF" THEN LET Z9$="ENDTRACE"
IF Z9$="FID" AND Z$(Z,3)<>"(0)" THEN LET Z9$="FID?"
IF Z9$="PGN" THEN LET Z9$="PGM(-2)"
IF Z9$="REM" OR Z9$="TABLE" THEN GOTO L16245
IF Z9$<>"FN" THEN GOTO L16275
IF Z$(Z,1)>="A" AND Z$(Z,1)<="Z" THEN LET Z9$=Z9$+Z$(Z,1),Z=Z+1
IF Z$(Z,1)="$" THEN LET Z9$=Z9$+"$",Z=Z+1
LET Z9$=Z9$+"?"
GOTO L16275
L16245: LET Z0$=Z0$+Z9$+" "+Z$(Z)
RETURN 
L16255: REM " TRY FOR VARIABLE 
LET Z9$=Z$(Z,1),Z=Z+1
IF Z$(Z,1)>="0" AND Z$(Z,1)<="9" THEN LET Z9$=Z9$+Z$(Z,1),Z=Z+1
IF Z$(Z,1)="$" THEN LET Z9$=Z9$+"$",Z=Z+1
L16275: REM " SEE IF FOLLOWED BY ALPHA OR NUMERIC 
IF (Z$(Z,1)>="0" AND Z$(Z,1)<="9") OR (Z$(Z,1)>="A" AND Z$(Z,1)<="Z") THEN LET Z9$=Z9$+" "
LET Z0$=Z0$+Z9$
GOTO L16020
L16500: REM 16500,5 -- CONVERT FOR TBD/SMC
LET Z0$=""
L16510: GOSUB L20000; REM ' Z1$ is chunk of line to examine
LET V0$="**",V1$="^"; GOSUB L20200
LET V0$="'BG'",V1$="'GS'"; GOSUB L20200
LET V0$="'EG'",V1$="'GE'"; GOSUB L20200
LET V0$="'BM'",V1$="'BG'"; GOSUB L20200
LET V0$="'EM'",V1$="'EG'"; GOSUB L20200
LET V0$="'CU'",V1$="'RC'"; GOSUB L20200
LET V0$="'DM'",V1$="'RM'"; GOSUB L20200
LET V0$="'CN'",V1$="'CURSOR'(""ON"")"; GOSUB L20200
LET V0$="'CO'",V1$="'CURSOR'(""OFF"")"; GOSUB L20200
LET V0$="'BROWN'",V1$="'RGB'(2,2,2)"; GOSUB L20200
LET V0$="'GRAY'",V1$="'RGB'(1,1,1)"; GOSUB L20200
LET V0$="'LBLUE'",V1$="'RGB'(0,0,1)"; GOSUB L20200
LET V0$="'LCYAN'",V1$="'RGB'(0,1,1)"; GOSUB L20200
LET V0$="'LGREEN'",V1$="'RGB'(0,1,0)"; GOSUB L20200
LET V0$="'LMAGENTA'",V1$="'RGB'(1,0,1)"; GOSUB L20200
LET V0$="'LRED'",V1$="'RGB'(1,0,0)"; GOSUB L20200
LET V0$="'LGRAY'",V1$="'RGB'(2,2,2)"; GOSUB L20200
LET V0$="ARG(",V1$="ARGV("; GOSUB L20200
LET V0$="ATR(",V1$="FATTR?("; GOSUB L20200
LET V0$="BSZ(1)",V1$="DSZ"; GOSUB L20200
LET V0$="CDN",V1$="JUL(0,0,0)-1721423+TIM/24"; GOSUB L20200
LET V0$="CDS",V1$="DATE(0)"; GOSUB L20200
LET V0$="CGV(",V1$="STBL("; GOSUB L20200
LET V0$="CPP(",V1$="CPL("; GOSUB L20200
LET V0$="CVT(",V1$="TB.CVT("; GOSUB L20200
LET V0$="DIM(",V1$="FILL("; GOSUB L20200
LET V0$="ERM(",V1$="ERRMES("; GOSUB L20200
LET V0$="ESC",V1$="$1B$"; GOSUB L20200
LET V0$="FID(",V1$="TB.FID("; GOSUB L20200
LET V0$="TB.FID(0)",V1$="FID(0)"; GOSUB L20200
LET V0$="FIX(",V1$="TB.FIX("; GOSUB L20200
LET V0$="FKY(",V1$="KEYF("; GOSUB L20200
LET V0$="FMD(",V1$="FIELD?("; GOSUB L20200
LET V0$="FLOATING POINT",V1$="FLOATINGPOINT"; GOSUB L20200
LET V0$="INF(",V1$="INFO("; GOSUB L20200
LET V0$="LKY(",V1$="KEYL("; GOSUB L20200
LET V0$="MSORT",V1$="VKEYED"; GOSUB L20200
LET V0$="NTD(",V1$="TB.NTD("; GOSUB L20200
LET V0$="OCH",V1$="CHN"; GOSUB L20200
LET V0$="OPT=",V1$="MODE?="; GOSUB L20200
LET V0$="PGN",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PKY(",V1$="KEYP("; GOSUB L20200
LET V0$="PRC",V1$="TCB(14)"; GOSUB L20200
rem infodev uses PRN$ variable legal 
rem LET V0$="PRM",V1$="OPTS?"; GOSUB L20200
LET V0$="PRECISION 127",V1$="PRECISION -1"; GOSUB L20200
LET V0$="PREFIX",V1$="PFX"; GOSUB L20200
LET V0$="PSAVE",V1$="SAVEP"; GOSUB L20200
LET V0$="PTN",V1$="DSZ"; GOSUB L20200
LET V0$="PUB(",V1$="PUB?("; GOSUB L20200
LET V0$="QUO",V1$="$22$"; GOSUB L20200
LET V0$="REBOOT",V1$="RELEASE"; GOSUB L20200
LET V0$="RND(0)",V1$="RND?(0)"; GOSUB L20200
REM LET V0$="SEP",V1$="$0A$"; GOSUB L20200
LET V0$="SET DIR",V1$="CHDIR"; GOSUB L20200
LET V0$="DIR",V1$="DIR("""")"; GOSUB L20200
LET V0$="SET OPTS",V1$="SETOPTS"; GOSUB L20200
LET V0$="SET PFX",V1$="PREFIX"; GOSUB L20200
LET V0$="SRT=",V1$="KNUM="; GOSUB L20200
LET V0$="SSN",V1$="SSN?"; GOSUB L20200
LET V0$="STL(",V1$="LEN("; GOSUB L20200
LET V0$="SWP(",V1$="SWAP("; GOSUB L20200
LET V0$="TCB(3)",V1$="TCB(10)"; GOSUB L20200
LET V0$="TCB(8)",V1$="TCB?(8)"; GOSUB L20200
LET V0$="TCB(9)",V1$="TCB?(9)"; GOSUB L20200
LET V0$="TEXT",V1$="STRING"; GOSUB L20200
LET V0$="TISAM",V1$="CISAM"; GOSUB L20200
LET V0$="TSK(",V1$="TB.TSK("; GOSUB L20200
LET V0$="WIN(",V1$="WIN?("; GOSUB L20200
LET V0$="WINDOW ATTR",V1$="PRINT 'ATTR'"; GOSUB L20200
LET V0$="WINDOW COLOR",V1$="PRINT 'RGB'"; GOSUB L20200
LET V0$="WINDOW DELETE",V1$="PRINT 'DROP'"; GOSUB L20200
LET V0$="WINDOW FKEYS",V1$="PRINT 'FL',?"; GOSUB L20200
LET V0$="WINDOW IOREGION (DELETE)",V1$="PRINT 'SCROLL'(""RESET"")"; GOSUB L20200
LET V0$="WINDOW MOVE",V1$="PRINT 'MOVE'"; GOSUB L20200
LET V0$="WINDOW POP",V1$="PRINT 'POP'"; GOSUB L20200
LET V0$="WINDOW PUSH",V1$="PRINT 'PUSH'"; GOSUB L20200
LET V0$="WINDOW REFRESH",V1$="PRINT 'RS'"; GOSUB L20200
LET V0$="WINDOW RESIZE",V1$="PRINT 'SIZE'"; GOSUB L20200
LET V0$="WINDOW SCROLL (OFF)",V1$="PRINT 'SCROLL'(""OFF"")"; GOSUB L20200
LET V0$="WINDOW SCROLL (ON)",V1$="PRINT 'SCROLL'(""ON"")"; GOSUB L20200
LET V0$="WINDOW SELECT",V1$="PRINT 'GOTO'"; GOSUB L20200
LET V0$="WINDOW SWAP",V1$="PRINT 'SWAP'"; GOSUB L20200
LET V0$="WINDOW WRAP (OFF)",V1$="PRINT 'WRAP'(""OFF"")"; GOSUB L20200
LET V0$="WINDOW WRAP (ON)",V1$="PRINT 'WRAP'(""ON"")"; GOSUB L20200


REM custome replaces 
customTBDReplaces:
LET V0$="DTN(",V1$="TB.DTN("; GOSUB L20200
LET V0$="NTD",V1$="TB.NTD("; GOSUB L20200
LET V0$="NMV",V1$="TB.NMV"; GOSUB L20200
LET V0$="UNT(",V1$="TB.UNT0("; GOSUB L20200
LET V0$="NEA(",V1$="FNNEA("; GOSUB L20200
LET V0$="DSD(",V1$="TB.DSD("; GOSUB L20200
LET V0$="XFD(",V1$="TB.XFD("; GOSUB L20200
LET V0$="FST(",V1$="TB.FST("; GOSUB L20200

IF POS("WINDOW "=Z1$) THEN GOSUB L17000; REM ' parse & convert window commands
LET Z0$=Z0$+Z1$; GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L16510; REM ' build up converted line; continue if not done
LET Z1$=Z0$; REM ' Now do substitutions that include quoted strings
FOR KN=0 TO 15; LET V0$=",KNUM="""+STR(KN)+"""",V1$=",KNUM="+STR(KN); GOSUB L20200; NEXT KN
LET V0$=",MODE?=""DDE""",V1$=",MODE=""DDECLIENT"""; GOSUB L20200
LET V0$=",MODE?=""TEXT""",V1$=",ISZ=-1"; GOSUB L20200
LET Z0$=Z1$

lineReplaceTBD: 
call "replace.bbj",z0$

RETURN 
L17000: REM 17000 - Convert WINDOW CREATE (
L17010: LET I=POS("WINDOW CREATE ("=Z1$); IF I=0 THEN GOTO L17070
LET J=POS(")"=Z1$(I)); IF J=0 THEN GOTO L17070
LET C=POS(","=Z1$(I,J),1,0); IF C<>3 THEN GOTO L17070
LET C=POS(","=Z1$(I,J),1,2)
LET Z1$=Z1$(1,I-1)+"PRINT 'WINDOW'("+Z1$(I+C,J-C-1)+","+Z1$(I+15,C-15-1)+"),"+Z1$(I+J)
GOTO L17010
L17070: REM - Convert WINDOW IOREGION (CREATE,
L17080: LET I=POS("WINDOW IOREGION (CREATE,"=Z1$); IF I=0 THEN GOTO L17140
LET J=POS(")"=Z1$(I)); IF J=0 THEN GOTO L17140
LET C=POS(","=Z1$(I,J),1,0); IF C<>4 THEN GOTO L17140
LET C=POS(","=Z1$(I,J),1,3)
LET Z1$=Z1$(1,I-1)+"PRINT 'SCROLL'("+Z1$(I+C,J-C-1)+","+Z1$(I+24,C-24-1)+"),"+Z1$(I+J)
GOTO L17080
L17140: REM  - Convert WINDOW SHAPE (BOX,
L17150: LET I=POS("WINDOW SHAPE (BOX,"=Z1$); IF I=0 THEN GOTO L17210
LET J=POS(")"=Z1$(I)); IF J=0 THEN GOTO L17210
LET C=POS(","=Z1$(I,J),1,0); IF C<>4 THEN GOTO L17210
LET C=POS(","=Z1$(I,J),1,3)
LET Z1$=Z1$(1,I-1)+"PRINT 'BOX'("+Z1$(I+C,J-C-1)+","+Z1$(I+18,C-18-1)+"),"+Z1$(I+J)
GOTO L17150
L17210: REM  - Convert WINDOW SHAPE (LINE,HORIZONTAL,
L17220: LET I=POS("WINDOW SHAPE (LINE,HORIZONTAL,"=Z1$); IF I=0 THEN GOTO L17270
LET J=POS(")"=Z1$(I)); IF J=0 THEN GOTO L17270
LET C=POS(","=Z1$(I,J),1,0); IF C<>4 THEN GOTO L17270
LET Z1$=Z1$(1,I-1)+"PRINT 'BOX'("+Z1$(I+30,J-30-1)+",0),"+Z1$(I+J)
GOTO L17220
L17270: REM  - Convert WINDOW SHAPE (LINE,VERTICAL,
L17280: LET I=POS("WINDOW SHAPE (LINE,VERTICAL,"=Z1$); IF I=0 THEN GOTO L17340
LET J=POS(")"=Z1$(I)); IF J=0 THEN GOTO L17340
LET C=POS(","=Z1$(I,J),1,0); IF C<>4 THEN GOTO L17340
LET C=POS(","=Z1$(I,J),1,4)
LET Z1$=Z1$(1,I-1)+"PRINT 'BOX'("+Z1$(I+28,C-28)+"0,"+Z1$(I+C,J-C)+","+Z1$(I+J)
GOTO L17280
L17340: RETURN 
L17400: REM 17400 -- CONVERT FOR BB3 AND S10
LET Z0$=""
L17420: GOSUB L20000
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0)",V1$="FID(0)"; GOSUB L20200
LET V0$="ISZ",V1$="ISZ?"; GOSUB L20200
LET Z0$=Z0$+Z1$
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L17420
RETURN 
L17500: REM 17500 -- convert for BOSS/VS
LET Z0$=""
L17520: GOSUB L20000
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0",V1$="FID(0"; GOSUB L20200
LET V0$="PGM(0)",V1$="PGM(-1)"; GOSUB L20200
LET V0$="PNM",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PRC",V1$="TCB(14)"; GOSUB L20200
LET V0$="CSW",V1$="SGN(TCB(13))"; GOSUB L20200
LET V0$="OPEN INPUT",V1$="OPEN "; GOSUB L20200
LET V0$="OPEN OUTPUT",V1$="OPEN "; GOSUB L20200
LET V0$="PREFIX",V1$="PREFIX?"; GOSUB L20200
LET V0$="EXIT TO",V1$="EXITTO"; GOSUB L20200
RESTORE L17700
L17640: DREAD V0$,ERR=L17650; LET V1$=V0$+"(",V0$=V0$+"$("; GOSUB L20200; GOTO L17640
L17650: RESTORE L17720
L17660: DREAD V1$,ERR=L17670; LET V0$=V1$+"$"; GOSUB L20200; GOTO L17660
L17670: LET Z0$=Z0$+Z1$
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L17520
RETURN 
L17700: DATA "AND","ATH","BIN","CHR","CRC","FID","GAP","HSH"
DATA "IOR","KEY","LRC","NOT","PGM","STR","TBL","XOR",-1
L17720: DATA "DAY","PFX","SSN","SYS",-1
L18000: REM 18000 -- convert for BB7
LET Z0$=""
L18020: GOSUB L20000
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0",V1$="FID(0"; GOSUB L20200
LET V0$="PGM(0)",V1$="PGM(-1)"; GOSUB L20200
LET V0$="PRC",V1$="TCB(14)"; GOSUB L20200
LET V0$="OPEN INPUT",V1$="OPEN "; GOSUB L20200
LET V0$="OPEN OUTPUT",V1$="OPEN "; GOSUB L20200
LET V0$="PREFIX",V1$="PREFIX?"; GOSUB L20200
LET Z0$=Z0$+Z1$
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L18020
RETURN 
L18500: REM 18500,5 -- REXON CONVERT.  PARSE KEYWORDS AND INSERT SPACES
REM -- REMOVE SPACE AFTER VERB
LET Z=POS(" "=Z$,1,2); IF Z>0 THEN LET Z$=Z$(1,Z-1)+Z$(Z+1)
LET Z0$=Z$(1,4),Z$=Z$+" ",Z=5; REM " ADD SPACE TO Z$ FOR CONVENIENCE 
L18520: REM " SCAN LOOP 
IF Z>=LEN(Z$) THEN RETURN 
LET Z9$=Z$(Z,1)
IF Z9$>="A" AND Z9$<="Z" THEN GOTO L18615
IF Z9$=$22$ OR Z9$="$" OR Z9$="'" THEN GOTO L18560
IF Z9$="!" THEN GOTO L18595
LET Z0$=Z0$+Z9$,Z=Z+1
GOTO L18520
L18560: REM " QUOTES, HEX CONSTANT, OR MNEMONIC 
LET Z9=POS(Z9$=Z$(Z),1,2)
IF Z9=0 THEN GOTO L18585
LET Z0$=Z0$+Z$(Z,Z9),Z=Z+Z9
GOTO L18520
L18585: LET Z0$=Z0$+Z$(Z),Z=Z+10000
GOTO L18520
L18595: REM " BANG ENCOUNTERED 
IF Z>6 THEN LET Z0$=Z0$+"; "
LET Z0$=Z0$+"REM "+Z$(Z+1),Z=Z+10000
GOTO L18520
L18615: REM " ALPHA ENCOUNTERED 
REM " TRY FOR KEYWORD 
LET Z1=POS("A">Z$(Z)),Z2=POS("Z"<Z$(Z))
IF Z2>0 AND Z2<Z1 THEN LET Z1=Z2
LET Z1=Z1-1
IF Z1>14 THEN LET Z1=14
L18645: IF Z1<2 THEN GOTO L18795
IF POS(Z$(Z,Z1)=K$(O[Z1],L[Z1]),Z1)>0 THEN GOTO L18665
LET Z1=Z1-1
GOTO L18645
L18665: LET Z9$=Z$(Z,Z1),Z=Z+Z1
REM " WE HAVE KEYWORD - CHECK FOR SPECIAL CASES 
IF Z9$<>"FOR" OR LEN(Z0$)<6 THEN GOTO L18695
REM " DON'T ALLOW FOR EXCEPT AS FIRST WORD (I.E. IF I=F OR J=K...) 
LET Z=Z-3
GOTO L18795
L18695: IF Z9$="TRACE" THEN LET Z9$="SETTRACE"; GOTO L18785
IF Z9$="TRACEOFF" THEN LET Z9$="ENDTRACE"; GOTO L18785
IF Z9$="FID" AND Z$(Z,3)<>"(0)" THEN LET Z9$="FID?"; GOTO L18785
IF Z9$="PGN" THEN LET Z9$="PGM(-2)"; GOTO L18785
IF Z9$="SYS TEM" THEN LET Z9$="RELEASE"; GOTO L18785
IF Z9$="REM" OR Z9$="TABLE" THEN GOTO L18785
IF Z9$="ERS" THEN LET Z9$="TCB(5)"; GOTO L18785
IF Z9$<>"STP" THEN GOTO L18760
LET X=0
L18740: IF Z$(Z,1)="(" THEN LET X=X+1 ELSE IF Z$(Z,1)=")" THEN LET X=X-1
LET Z9$=Z9$+Z$(Z,1),Z=Z+1,Z1=Z1+1; IF X THEN GOTO L18740
LET Z9$(1,3)="CVS",Z9$=Z9$(1,LEN(Z9$)-1)+"+1)"
GOTO L18815
L18760: IF Z9$<>"FN" THEN GOTO L18815
IF Z$(Z,1)>="A" AND Z$(Z,1)<="Z" THEN LET Z9$=Z9$+Z$(Z,1),Z=Z+1
IF Z$(Z,1)="$" THEN LET Z9$=Z9$+"$",Z=Z+1
LET Z9$=Z9$+"?"
GOTO L18815
L18785: LET Z0$=Z0$+Z9$+" "+Z$(Z)
RETURN 
L18795: REM " TRY FOR VARIABLE 
LET Z9$=Z$(Z,1),Z=Z+1
IF Z$(Z,1)>="0" AND Z$(Z,1)<="9" THEN LET Z9$=Z9$+Z$(Z,1),Z=Z+1
IF Z$(Z,1)="$" THEN LET Z9$=Z9$+"$",Z=Z+1
L18815: REM " SEE IF FOLLOWED BY ALPHA OR NUMERIC 
IF (Z$(Z,1)>="0" AND Z$(Z,1)<="9") OR (Z$(Z,1)>="A" AND Z$(Z,1)<="Z") THEN LET Z9$=Z9$+" "
LET Z0$=Z0$+Z9$
GOTO L18520
L19000: REM 19000 -- CONVERT FOR PERTEC
LET Z0$=""
L19020: GOSUB L20000
REM " Z1$ = CHUNK OF LINE TO EXAMINE
LET V0$="FID(",V1$="FID?("; GOSUB L20200
LET V0$="FID?(0)",V1$="FID(0)"; GOSUB L20200
LET V0$="ORI(",V1$="IOR("; GOSUB L20200
LET V0$="ORX(",V1$="XOR("; GOSUB L20200
LET V0$="PGMDELETE ",V1$="ERASE "; GOSUB L20200
LET V0$="ADD ",V1$="ADDR "; GOSUB L20200
LET V0$="KEYED ",V1$="MKEYED "; GOSUB L20200
LET V0$="ADDF ",V1$="ADDR "; GOSUB L20200
LET V0$="BSAM ",V1$="MKEYED "; GOSUB L20200
LET V0$="'CP'",V1$="'CE'"; GOSUB L20200
LET V0$="ISAM ",V1$="MKEYED "; GOSUB L20200
LET V0$="DIRECT ",V1$="MKEYED "; GOSUB L20200
LET V0$="SORT ",V1$="MKEYED "; GOSUB L20200
LET V0$="FME",V1$="TCB(10)"; GOSUB L20200
LET V0$="NTM",V1$="TIM"; GOSUB L20200
LET V0$="PRECISION",V1$="PRECISION?"; GOSUB L20200
LET V0$="KEC(",V1$="KEYP("; GOSUB L20200
LET V0$="LAB(",V1$="DSK("; GOSUB L20200
LET V0$="WHO",V1$="FID(0)"; GOSUB L20200
LET V0$="MKEYED",V1$="MKEYED?"; GOSUB L20200
LET V0$=" !",V1$=" REM "; GOSUB L20200
LET Z0$=Z0$+Z1$
REM "SEE IF WE'RE DONE
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L19020
RETURN 
L19500: REM 19500 -- convert for OpenBASIC
LET MASK=MASK("",",KEY=[A-Z]+#=")
LET Z0$=""
L19520: GOSUB L20000
LET V0$="FID(",V1$="FID?("; GOSUB L20200; REM ' Force manual review
LET V0$="FID?(0",V1$="FID(0"; GOSUB L20200
LET V0$="PGM(0)",V1$="PGM(-1)"; GOSUB L20200
LET V0$="PNM",V1$="PGM(-2)"; GOSUB L20200
LET V0$="PRC",V1$="TCB(14)"; GOSUB L20200
LET V0$="CSW",V1$="SGN(TCB(13))"; GOSUB L20200
LET V0$="OPEN INPUT",V1$="OPEN"; GOSUB L20200
LET V0$="PREFIX",V1$="PREFIX?"; GOSUB L20200; REM ' Force manual review
LET V0$="ASCII(",V1$="ASC("; GOSUB L20200
LET V0$="CHAR(",V1$="CHR("; GOSUB L20200
LET V0$="ENDIF",V1$="FI"; GOSUB L20200
LET V0$="FLOATING POINT",V1$="FLOATINGPOINT"; GOSUB L20200
LET V0$="LVL(0)",V1$="REV"; GOSUB L20200
LET V0$="OPTS=",V1$="MODE?="; GOSUB L20200
LET V0$="PSAVE",V1$="SAVEP"; GOSUB L20200
LET V0$="PUB(",V1$="PUB?("; GOSUB L20200; REM ' Force manual review
LET V0$="REM *",V1$="REM ^"; GOSUB L20200
LET V0$="REM KEEP",V1$="REM 0"; GOSUB L20200
LET V0$="TCB(3)",V1$="TCB?(3)"; GOSUB L20200
LET V0$="TCB(8)",V1$="TCB?(8)"; GOSUB L20200
LET V0$="TCB(9)",V1$="TCB?(9)"; GOSUB L20200
LET V0$="TCB(10)",V1$="TCB?(10)"; GOSUB L20200
LET V0$="TCB(11)",V1$="TCB?(11)"; GOSUB L20200
LET V0$="TCB(12)",V1$="TCB?(12)"; GOSUB L20200
LET V0$="TCB(13)",V1$="TCB?(13)"; GOSUB L20200
LET V0$="TCB(14)",V1$="TCB?(14)"; GOSUB L20200
LET V0$="TCB?(10)",V1$="TCB(11)"; GOSUB L20200; REM ' last channel with error
LET V0$="TCB?(11)",V1$="TCB(12)"; GOSUB L20200; REM ' last channel accessed
LET V0$="TCB?(12)",V1$="TCB(10)"; GOSUB L20200; REM ' last host error
LET V0$="TSK(",V1$="TSK?("; GOSUB L20200; REM ' Force manual review
LET V0$="WHO",V1$="INFO(3,2)"; GOSUB L20200
LET V0$="'NL'",V1$="'LF'"; GOSUB L20200; REM ' Newline -> Line Feed
LET V0$="'SN'",V1$="'SP'"; GOSUB L20200; REM ' Screen Normal -> Standard Print
LET V0$="'SW'",V1$="'CP'"; GOSUB L20200; REM ' Screen Wide -> Compressed Print
LET V0$="'TP'",V1$="'RP'"; GOSUB L20200; REM ' Transmit Page -> Read Page
LET MASK=MASK(Z1$)
WHILE MASK
  LET MASK$=Z1$(MASK,TCB(16))
  LET KEYNAME$=MASK$(6,LEN(MASK$)-7)
  LET Z1$=Z1$(1,MASK-1)+",KNUM="""+KEYNAME$+""",KEY="+Z1$(MASK+TCB(16))
  LET MASK=MASK(Z1$)
WEND
LET Z0$=Z0$+Z1$
GOSUB L20100; LET Z0$=Z0$+Z1$; IF Z$>"" THEN GOTO L19520
RETURN 
REM "SEE IF WE'RE DONE
L20000: REM 20000 -- SCAN Z$ FOR TEXT SEGMENT Z1$ OUTSIDE QUOTES OR REM
LET Z=POS($22$=Z$); IF Z=0 THEN LET Z1$=Z$,Z$="" ELSE LET Z1$=Z$(1,Z-1),Z$=Z$(Z)
LET Z=POS(" REM "=Z1$); IF Z>0 THEN LET Z$=Z1$(Z)+Z$,Z1$=Z1$(1,Z-1)
RETURN 
L20100: REM 20100 -- SCAN LEADING QUOTE OR REM FROM Z$ INTO Z1$
IF Z$="" THEN LET Z1$=""; RETURN 
IF POS(" REM "=Z$)=1 THEN LET Z1$=Z$,Z$=""; RETURN 
IF Z$(1,1)<>$22$ THEN LET Z1$=""; RETURN 
LET Z=POS($22$=Z$(2)); IF Z=0 THEN LET Z1$=Z$,Z$="" ELSE LET Z1$=Z$(1,Z+1),Z$=Z$(Z+2)
RETURN 
L20200: REM 20200 -- REPLACE V0$ TOKENS WITH V1$ IN Z1$
REM ' scan for every occurrence of V0$ in Z1$.  If first character of V0$ is an identifier character, and previous character in Z1$ is also an identifier character, OR last character of V0$ is an idenfier character, and next character in Z1$ is also an identifier character, then we don't have a discrete token, so keep searching.  If we found a discrete token, make the substitution.  When we can't find any more occurrences of V0$ in Z1$, return
LET Z1=1,I$="ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789.$%"
L20230: LET Z=POS(V0$=Z1$(Z1)),Z1=Z1+Z-1; IF Z=0 THEN RETURN 
IF (POS(V0$(1,1)=I$) AND Z1>1 AND POS(Z1$(Z1-1,1)=I$)) OR (POS(V0$(LEN(V0$))=I$) AND Z1+LEN(V0$)<LEN(Z1$) AND POS(Z1$(Z1+LEN(V0$),1)=I$)) THEN LET Z1=Z1+LEN(V0$) ELSE LET Z1$=Z1$(1,Z1-1)+V1$+Z1$(Z1+LEN(V0$)),Z1=Z1+LEN(V1$)
GOTO L20230
L25000: REM 25000 -- CONVERT KEYS/DATA FOR PARTICULAR SENDER
IF HIBIT$="ALL" THEN DIM Z0$(LEN(Z$),$80$); LET Z$=XOR(Z$,Z0$); RETURN 
IF HIBIT$<>"LF" THEN RETURN ELSE IF SENDER$="PRT" THEN GOTO L25060
REM -- CHANGE $8A$ TO $0A$
L25040: LET Z=POS($8A$=Z$); IF Z THEN LET Z$(Z,1)=$0A$; GOTO L25040
RETURN 
L25060: REM -- CHANGE $0D$ TO $0A$
L25070: LET Z=POS($0D$=Z$); IF Z THEN LET Z$(Z,1)=$0A$; GOTO L25070
RETURN 
END