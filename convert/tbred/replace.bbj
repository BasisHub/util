REM /**
REM  * replace.bbj
REM  * @author atimm
REM  *
REM  */
use java.util.regex.Pattern
use java.util.regex.Matcher
use java.util.LinkedHashMap
use org.apache.commons.lang.StringUtils

replace:
enter z$ 
if pos("ADDSORT"=z$)>0 then call "replace.bbj::replaceADDSORT",z$,"ADDSORT" endif 
if pos("REMSORT"=z$)>0 then call "replace.bbj::replaceREMSORT",z$,"REMSORT" endif 

if pos("BBJ REM"=z$)>0 then
    rem check for linenumbers
    linenumber=num( z$(1,pos(" "=z$,1,1)),err=*next);z$=z$(1,pos(" "=z$)+1)+"REM "+z$(pos(" "=z$,1,1)+1);return  
    z$="REM "+z$;return 
endif 


if pos("INDEXED "=z$)>0 or pos("SORT "=z$) or pos("DIRECT "=z$)>0 or pos("VKEYED "=z$) then call "replace.bbj::handleFileCreate",Z$ endif 



declare String z! 
z! = z$ 
z! = StringReplace.replaceRoundBrackets(z!)
z! = StringReplace.replaceENV(z!)
rem mode LINK - not used ORACLE 
z!=z!.replaceAll("MODE\?=""LINK","MODE=""LINK") 
z!=z!.replaceAll("GRAPH=ASC\(PGCHARBASE\)","GRAPH=ASC(stbl(""!PGCHARBASE""))") 
z!=z!.replaceAll("FINPUT \(0,ATR=$05$+CHR\(COLN\)+CHR\(LIGN\)+CHR\(LONG_AFF\)+CHR\(LONG_SAI\),ERR=xxxxx\) E$","CALL ""DB%FINPUT"",ERR=xxxxx,COLN,LIGN,LONG_AFF,LONG_SAI,0,"""",E$,FCT")
z!=z!.replaceAll("FINPUT \(0,ATR=$05$+CHR\(COLN\)+CHR\(LIGN\)+CHR\(LONG_AFF\)+CHR\(LONG_SAI\),EDT=VEDT$,ERR=xxxxx\) E$","CALL ""DB%FINPUT"",ERR=xxxxx,COLN,LIGN,LONG_AFF,LONG_SAI,0,VEDT$,E$,FCT")
z!=z!.replaceAll("FINPUT \(0,ATR=$05$+CHR\(COLN\)+CHR\(LIGN\)+CHR\(LONG_AFF\)+CHR\(LONG_SAI\),EDT=VEDT$,TIM=TPS_TIMER,ERR=xxxxx\) E$","CALL ""DB%FINPUT"",ERR=xxxxx,COLN,LIGN,LONG_AFF,LONG_SAI,TPS_TIMER,VEDT$,E$,FCT")

rem remove END from REMOVE!
if z!.contains("REMOVE") then z!=StringReplace.removeENDInStatement(z!,"REMOVE") endif 

rem replace DSK system var but not in REPDSK method 
z! = z!.replaceAll("(?<=\=\ )(DSK)","TB.REPDSK(DSK)") 

rem replace open mode? mode shell with open on | 
z! = z!.replaceAll("\,MODE\?\=""SHELL""\)","\)""\|""\+")   

rem raplce ALL """" 
z! = StringReplace.replaceAll(z!) 

rem replace insert array 
z! = StringReplace.replaceArray(z!,"INSERT")
rem replace delete array 
z! = StringReplace.replaceArray(z!,"DELETE") 

rem replace like with TB.LIKE 
z! = StringReplace.replaceLike(z!)


z$=z!
exit 



replaceVKEYEDDIRECT: 
    enter z$,filetype$
    beginLine$=z$(1,pos(filetype$=z$)-1)
    if pos(filetype$=z$)=0 then exit endif;createString$=z$(pos(filetype$=z$)) 
       endLine$="" 
        if pos(";"=createString$)>0 then endline$=createString$(pos(";"=createString$))
        if pos(filetype$=createString$)=0 then exit 
        createString$=createString$(pos(filetype$=createString$),pos(";"=createString$)-pos(filetype$=createString$))
        beginVar=pos(filetype$=createString$)+len(filetype$) 
        endVar = pos(","=createString$)-beginVar
        file$=createString$(beginVar,endVar)

        beginVar=pos(","=createString$,1,1)+1
        endVar=pos(","=createString$,1,2)-beginVar 
        keyChainString$=createString$(beginVar,endVar)

        if pos(":"=keyChainString$)>0 then 
          beginVar=1
          endVar = pos(":"=keyChainString$,1,1)-beginVar
          keyName$=keyChainString$(beginVar,endVar)                
          beginVar=pos(":"=keyChainString$)+1
          keyChain$=keyChainString$(beginVar)
        else 
          keyName$="" 
          keyChain$=keyChainString$
        endif 

        nbrec=0
        beginVar=pos(","=createString$,1,3)+1
        endVar = pos(","=createString$,1,4)-beginVar
        reclen$=createString$(beginVar,endVar) 

        beginVar=pos(","=createString$,1,4)+1
        endVar = pos(","=createString$,1,5)-beginVar
        dsknum$=createString$(beginVar,endVar)

        if keyName$>"" then 
            createString$=filetype$+" TB.REPDSK("+dsknum$+")+"+file$+","+keyChain$+",0,"+reclen$+";TB.setKeyName(TB.REPDSK("+dsknum$+")+"+file$+",0,"+keyName$+")"
        else 
            createString$=filetype$+" TB.REPDSK("+dsknum$+")+"+file$+","+keyChain$+",0,"+reclen$
            if fileType$="VKEYED" then createString$=createString$+";TB.setKeyName(TB.REPDSK("+dsknum$+")+"+file$+",0,""0"")" endif 
        endif 
        if pos(filetype$+" "=endline$)>0 then call "replace.bbj::replaceVKEYEDDIRECT",endline$,filetype$ endif
        z$=beginLine$+createString$+endline$
exit 


replaceINDEXEDSORT: 
    enter z$,filetype$
    beginLine$=z$(1,pos(filetype$=z$)-1)
    if pos(filetype$=z$)=0 then exit endif;createString$=z$(pos(filetype$=z$)) 
       endLine$="" 
        if pos(";"=createString$)>0 then endline$=createString$(pos(";"=createString$))
        if pos(filetype$=createString$)=0 then exit 
        createString$=createString$(pos(filetype$=createString$),pos(";"=createString$)-pos(filetype$=createString$))
        beginVar=pos(filetype$=createString$)+len(filetype$) 
        endVar = pos(","=createString$)-beginVar
        file$=createString$(beginVar,endVar)

        beginVar=pos(","=createString$,1,1)+1
        endVar=pos(","=createString$,1,2)-beginVar 
        keyChain$=createString$(beginVar,endVar)

         beginVar=pos(","=createString$,1,2)+1
        endVar = pos(","=createString$,1,3)-beginVar
        reclen$=createString$(beginVar,endVar) 

        beginVar=pos(","=createString$,1,3)+1
        endVar = pos(","=createString$,1,4)-beginVar
        dsknum$=createString$(beginVar,endVar)

        createString$=filetype$+" TB.REPDSK("+dsknum$+")+"+file$+","+keyChain$+","+reclen$

        if pos(filetype$+" "=endline$)>0 then call "replace.bbj::replaceINDEXEDSORT",endline$,filetype$ endif
        z$=beginLine$+createString$+endline$
exit


handleFileCreate: 
        enter z$ 
        if pos("VKEYED "=z$)>0 then call "replace.bbj::replaceVKEYEDDIRECT",z$,"VKEYED" endif        
        if pos("INDEXED "=z$)>0 then call "replace.bbj::replaceINDEXEDSORT",z$,"INDEXED" endif 
        if pos("SORT "=z$)>0 then call "replace.bbj::replaceINDEXEDSORT",z$,"SORT" endif 
        if pos("DIRECT "=z$)>0 then call "replace.bbj::replaceVKEYEDDIRECT",z$,"DIRECT" endif        
exit 



replaceADDSORT: 
    enter z$,keyword$
    beginLine$=z$(1,pos(keyword$=z$)-1)
    if pos(keyword$=z$)=0 then exit endif;createString$=z$(pos(keyword$=z$)) 
       endLine$="" 
        if pos(";"=createString$)>0 then endline$=createString$(pos(";"=createString$))
        if pos(keyword$=createString$)=0 then exit 
        createString$=createString$(pos(keyword$=createString$),pos(";"=createString$)-pos(keyword$=createString$))
        beginVar=pos(keyword$=createString$)+len(keyword$) 
        endVar = pos(","=createString$)-beginVar
        file$=createString$(beginVar,endVar)

        beginVar=pos(","=createString$,1,1)+1
        endVar=pos(","=createString$,1,2)-beginVar 
        keyChainString$=createString$(beginVar,endVar)

        if pos(":"=keyChainString$)>0 then 
          beginVar=1
          endVar = pos(":"=keyChainString$,1,1)-beginVar
          keyName$=keyChainString$(beginVar,endVar)                
          beginVar=pos(":"=keyChainString$)+1
          keyChain$=keyChainString$(beginVar)
        else 
          keyName$="" 
          keyChain$=keyChainString$
        endif 

        beginVar=pos(","=createString$,1,2)+1
        endVar = pos(","=createString$,1,3)-beginVar
        dsknum$=createString$(beginVar,endVar)

        if keyName$="" then keyName$="""0"""

                keyChain! = keyChain$ 
        keyChain$ = keyChain!.replaceAll("""","""""") 
        createString$="TB."+keyword$+"(TB.REPDSK("+dsknum$+")+"+file$+","+keyName$+","""+keyChain$+""")"

        if pos(keyword$+" "=endline$)>0 then call "replace.bbj::replaceADDSORT",endline$,keyword$ endif
        z$=beginLine$+createString$+endline$
exit 


replaceREMSORT: 
    enter z$,keyword$
    beginLine$=z$(1,pos(keyword$=z$)-1)
    if pos(keyword$=z$)=0 then exit endif;createString$=z$(pos(keyword$=z$)) 
       endLine$="" 
        if pos(";"=createString$)>0 then endline$=createString$(pos(";"=createString$))
        if pos(keyword$=createString$)=0 then exit 
        createString$=createString$(pos(keyword$=createString$),pos(";"=createString$)-pos(keyword$=createString$))
        beginVar=pos(keyword$=createString$)+len(keyword$) 
        endVar = pos(","=createString$)-beginVar
        file$=createString$(beginVar,endVar)

        beginVar=pos("SRT="=createString$,1,1)+4
        endVar=pos(","=createString$,1,2)-beginVar 
        keyName$=createString$(beginVar,endVar)


        createString$="TB."+keyword$+"("+file$+","+keyName$+")"

        if pos(keyword$+" "=endline$)>0 then call "replace.bbj::replaceREMSORT",endline$,keyword$ endif
        z$=beginLine$+createString$+endline$
exit 



class public StringReplace

        method public static boolean matchesKeyword(String keyword!)
        declare LinkedHashMap keyWordMap! 
        keyWordMap! = new LinkedHashMap()
        keyword! = keyword!.toUpperCase()

        keyWordMap!.put("FILL","") ; keyWordMap!.put("CLOSE","");keyWordMap!.put("WRITE","");keyWordMap!.put("STBL","")
        keyWordMap!.put("JUL","");keyWordMap!.put("LOCK","");keyWordMap!.put("UNLOCK","");keyWordMap!.put("ERASE","")
        keyWordMap!.put("TBL","");keyWordMap!.put("IF","")
        keyWordMap!.put("INPUT",""); keyWordMap!.put("FINPUT",""); keyWordMap!.put("READ","") ; keyWordMap!.put("EXTRACT",""); keyWordMap!.put("PREAD","")
        keyWordMap!.put("PEXTRACT",""); keyWordMap!.put("RECORD",""); keyWordMap!.put("OPEN",""); keyWordMap!.put("REMOVE",""); keyWordMap!.put("PRINT","") 
        keyWordMap!.put("KEYL","");keyWordMap!.put("KEYF","");keyWordMap!.put("KEYN","");keyWordMap!.put("KEYP","")
        keyWordMap!.put("OFFSET","")
        keyWordMap!.put("WINDOW","")
        keyWordMap!.put("WIN","")
        keyWordMap!.put("GETINFO","")
        keyWordMap!.put("SEVAL","")
        keyWordMap!.put("MIN","")
        keyWordMap!.put("MAX","")


        keyWordMap!.put("ABS","") ; keyWordMap!.put("ACS","") ; keyWordMap!.put("ASC","") ; keyWordMap!.put("ASN","") ; keyWordMap!.put("ATN","") ; keyWordMap!.put("ATQ","") 
        keyWordMap!.put("BSZ","") ; keyWordMap!.put("COS","") ; keyWordMap!.put("DEC","") ; keyWordMap!.put("DTN","") ; keyWordMap!.put("EPT","") ; keyWordMap!.put("ERR","")
        keyWordMap!.put("EXP","") ; keyWordMap!.put("FIX","") ; keyWordMap!.put("FPT","") ; keyWordMap!.put("IND","") ; keyWordMap!.put("INT","") ; keyWordMap!.put("LEN","") 
        keyWordMap!.put("LOG","") ; keyWordMap!.put("MAX","") ; keyWordMap!.put("MIN","") ; keyWordMap!.put("MOD","") ; keyWordMap!.put("NEA","") ; keyWordMap!.put("NLG","")
        keyWordMap!.put("NMV","") ; keyWordMap!.put("NUM","") ; keyWordMap!.put("POS","") ; keyWordMap!.put("RND","") ; keyWordMap!.put("SGN","") ; keyWordMap!.put("SIN","") 
        keyWordMap!.put("SQR","") ; keyWordMap!.put("SSZ","") ; keyWordMap!.put("STL","") ; keyWordMap!.put("TAN","") ; keyWordMap!.put("TCB","") ; keyWordMap!.put("UNT","") 
        keyWordMap!.put("AND","") ; keyWordMap!.put("ARG","") ; keyWordMap!.put("ATH","") ; keyWordMap!.put("ATR","") ; keyWordMap!.put("BIN","") ; keyWordMap!.put("CGV","") 
        keyWordMap!.put("CHR","") ; keyWordMap!.put("CPL","") ; keyWordMap!.put("CPP","") ; keyWordMap!.put("CRC","") ; keyWordMap!.put("CVT","") ; keyWordMap!.put("DCM","") 
        keyWordMap!.put("DIM","") ; keyWordMap!.put("DSD","") ; keyWordMap!.put("DSK","") ; keyWordMap!.put("DTR","") ; keyWordMap!.put("ERM","") ; keyWordMap!.put("FID","")
        keyWordMap!.put("FKY","") ; keyWordMap!.put("FMD","") ; keyWordMap!.put("FMT","") ; keyWordMap!.put("FST","") ; keyWordMap!.put("GAP","") ; keyWordMap!.put("HSH","")
        keyWordMap!.put("HTA","") ; keyWordMap!.put("INF","") ; keyWordMap!.put("IOR","") ; keyWordMap!.put("KEY","") ; keyWordMap!.put("LKY","") ; keyWordMap!.put("LRC","") 
        keyWordMap!.put("LST","") ; keyWordMap!.put("MNE","") ; keyWordMap!.put("NOT","") ; keyWordMap!.put("NTD","") ; keyWordMap!.put("PAD","") ; keyWordMap!.put("PCK","") 
        keyWordMap!.put("PFL","") ; keyWordMap!.put("PFP","") ; keyWordMap!.put("PGM","") ; keyWordMap!.put("PKY","") ; keyWordMap!.put("PUB","") ; keyWordMap!.put("RTD","") 
        keyWordMap!.put("SDX","") ; keyWordMap!.put("STR","") ; keyWordMap!.put("SWP","") ; keyWordMap!.put("TBL","") ; keyWordMap!.put("TSK","") ; keyWordMap!.put("UCM","") 
        keyWordMap!.put("UPK","") ; keyWordMap!.put("WIN","") ; keyWordMap!.put("XFD","") 




REM         keyWordMap!.put("","") ;
REM         keyWordMap!.put("","") ;
REM         keyWordMap!.put("","") ;
REM         keyWordMap!.put("","") ;
REM         keyWordMap!.put("","") ;

                if keyWordMap!.containsKey(keyword!) then methodret bbjapi().TRUE endif 

                   methodret bbjapi().FALSE
    methodend 

        rem  replace global vars like ]USER$ -> ENV_USER$   
    method public static String replaceENV(String z!)  
        z!=z!.replaceAll("\](?=\b\w+)\b","_")    
        REM replace QUO WITH """ 
        z!=z!.replaceAll("(?<=\+)QUO|QUO(?=\+)|(?<=\+)QUO(?=\+)","""") 
        methodret z!
    methodend


    REM /* 
    REM / replaces round brackets by [] for 
    REM */
    method public static String replaceRoundBrackets(String z!) 
        seterr replaceBracketsError
        declare Pattern p! 
        rem word that ends with ( but can have spaces before the ( 
        p! = Pattern.compile("\w+(\ *\()")
        declare Matcher m!
        m! = p!.matcher(z!)
        declare String keyword! 
        while m!.find() 
        keyword! = m!.group(0)
        keyword! = keyword!.substring(0,keyword!.length()-1).trim()  
        rem check for methods 
        if m!.start()>0 then if z!.substring(m!.start()-1,m!.start())="." then continue endif endif
        rem check for templates 
        if m!.start()>0 then if z!.substring(m!.start()-1,m!.start())=":" then continue endif endif

        rem check for custom functions 
        if keyword!.startsWith("FN") then continue endif 
        rem except for ARGV
        if keyword!.startsWith("ARGV") then continue endif 
        if StringReplace.matchesKeyword(keyword!) then continue endif 
        System.out.println("word:"+m!.toString())        
        posClosingBracket=z!.indexOf(")",m!.start());if posClosingBracket=-1 then methodret z! endif 
        rem don't convert it String does not contain closing bracket 
        if closingBracket=-1 then methodret z! endif 
        if posClosingBracket=z!.length() then endline=z!.length() else endline=posClosingBracket+1 endif
        posBracket = z!.indexOf("(",m!.start())

                rem check for openning brackets between the opening and the first closing one 
        noOpeningBrackets = StringUtils.countMatches(z!.substring(posBracket,posClosingBracket),"(")  

        if noOpeningBrackets>0 then 
            tmp$=z!.substring(m!.start()) 
            posClosingBracket=m!.start()+pos(")"=tmp$,1,noOpeningBrackets)-1
        endif            

                                z! = z!.substring(0,m!.start())+keyword!+"["+z!.substring(posBracket+1,posClosingBracket)+"]"+z!.substring(posClosingBracket+1)
        wend
        methodret z!
        replaceBracketsError: 
          if pos("StringIndexOutOfBoundsException"=errmes(-1)) >0 then System.out.println(z!);methodret z! 
          escape
    methodend 

   method public static String removeENDInStatement(String z!,String keyword!) 
      if ! z!.contains(keyword!) then methodret z! 

      beginVar = z!.indexOf(keyword!)
      endVar = z!.indexOf(")",beginVar)
      beginLine! = z!.substring(0,beginVar)
      sok=0 
      endline! = z!.substring(endVar,err=*next);sok=1
      if ! sok then methodret z! endif
      statement! = z!.substring(beginVar,endVar) 

      beginEnd=statement!.indexOf("END=") 
      if beginEnd=-1 then methodret z! endif 
      if statement!.indexOf(",",beginEnd)=-1 then 
        statement! = statement!.substring(0,beginEnd-1)
      else 
        statement! = statement!.substring(0,beginEnd)+statement!.substring(statement!.indexOf(",",beginEnd)+1) 
      endif
rem      escape
      if endline!.contains(keyword!) then endline!=#removeENDInStatement(endline!,keyword!) 
      z!=beginLine!+statement!+endline!

      methodret z!
    methodend 

    REM /*
    REM *
    REM *  replace string = ALL compareString by TB.ALLBBJ(string,compareString)
    REM * 
    REM */ 
    method public static String replaceAll(String z!) 
        seterr replaceAllError
        declare String newLine! 
        newLine! = new String("") 
        declare Pattern p!     
        p! = Pattern.compile("(\w+\$.*?|\"".*"")(\=\ *ALL\ *)(\w+\$.*?\ |\"".*"")")
        declare Matcher m!
        m! = p!.matcher(z!)

                        declare String beginLine!
        declare String endLine!  
        beginLine! = new String("") 
        endLine! = new String("") 
        startLine=0
        while m!.find() 
            beginLine! = z!.substring(startLine,m!.start(1))
            endline! = z!.substring(m!.end(3))
            newLine! = newLine!+beginLine!+" TB.ALLBBj("+m!.group(1)+","+m!.group(3)+")"
            startLine=m!.end(3)
        wend
            if newLine!.isEmpty() then methodret z! endif 
            newLine!=newLine!+endLine!
            methodret newLine!
    replaceAllError: 
    rem donoting         
    methodret z! 
    methodend 

    REM /*
    REM *
    REM *  replace string = INSERT ARRAY call "TBUTILS.bbj::INSERTARRAY",ARRAY[ALL],options
    REM * 
    REM */ 
    method public static String replaceArray(String z!,String function!) 
        seterr replaceArrayError
        declare String newLine! 
        newLine! = new String("") 
        declare Pattern p!     
        p! = Pattern.compile("((?i)"+function!+"\ ARRAY\ )(\w+\$*)(\[.*?\])")
        declare Matcher m!
        m! = p!.matcher(z!)

        declare String beginLine!
        declare String endLine!  
        beginLine! = new String("") 
        endLine! = new String("") 
        startLine=0
        while m!.find() 
            beginLine! = z!.substring(startLine,m!.start(1))
            endline! = z!.substring(m!.end(3))
            newLine! = newLine!+beginLine!+" call ""TBUTILS.bbj::"+function!+"ARRAY"","+m!.group(2)+"[ALL],"""+m!.group(3)+""""
            startLine=m!.end(3)
        wend
            if newLine!.isEmpty() then methodret z! endif 
            newLine!=newLine!+endLine!
            methodret newLine!
    replaceArrayError: 
    rem donoting         
    methodret z! 
    methodend 

    REM /*
    REM *
    REM *  replace string = INSERT ARRAY call "TBUTILS.bbj::INSERTARRAY",ARRAY[ALL],options
    REM * 
    REM */ 
    method public static String replaceLike(String z!) 
        seterr replaceLikeError
        declare String newLine! 
        newLine! = new String("") 
        declare Pattern p!     
REM         p! = Pattern.compile("([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\\_\/\:\-]+)\ ((?i)LIKE\ ?)([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\_\/\:\-]+|\"".*\""\=\d)\ ")
REM         p! = Pattern.compile("([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\\_\/\:\-]+)\ ((?i)LIKE\ ?)([\w\.\$\(\)\[\]\,]+|(\"".*?\""))\ ")
REM         p! = Pattern.compile("([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\\_\/\:\-]+)\ ((?i)LIKE\ ?)([\w\.\$\(\)\[\]\,\+\*\""\?\*\-\/\ ]+)(THEN)")
REM         p! = Pattern.compile("([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\\_\/\:\-]+)\ ((?i)LIKE\ ?)(.*?)(\<|\>|\=|THEN)")
        p! = Pattern.compile("([\w\.\$\(\)\[\]\=\d\,\*\""\?\|\&\@\\\_\/\:\-\+]+)\ ((?i)LIKE\ ?)(.*?)(\=0|\bTHEN\b|\bAND\b|\bOR\b)")       
        declare Matcher m!
        m! = p!.matcher(z!)

        declare String beginLine!
        declare String endLine!  
        beginLine! = new String("") 
        endLine! = new String("") 
        startLine=0

                while m!.find() 
            beginLine! = z!.substring(startLine,m!.start(1))
            endline! = z!.substring(m!.end(3))
            newLine! = newLine!+beginLine!+" TB.LIKE("+m!.group(1).trim()+","+m!.group(3).trim()+") "
            startLine=m!.end(3)
        wend
            if newLine!.isEmpty() then methodret z! endif 
            newLine!=newLine!+endLine!
            System.out.println(z!)
            methodret newLine!
    replaceLikeError: 
    rem donoting         
    methodret z! 
    methodend 

classend 